{"version":3,"file":"ngx-elements-router.js","sources":["../../../projects/ngx-elements-router/src/lib/bundle-registry.service.ts","../../../projects/ngx-elements-router/src/lib/entry-routing.service.ts","../../../projects/ngx-elements-router/src/lib/entry-zone.service.ts","../../../projects/ngx-elements-router/src/lib/noop-location-strategy.ts","../../../projects/ngx-elements-router/src/lib/no.component.ts","../../../projects/ngx-elements-router/src/lib/load-bundle.guard.ts","../../../projects/ngx-elements-router/src/lib/routing.directive.ts","../../../projects/ngx-elements-router/src/lib/zone.directive.ts","../../../projects/ngx-elements-router/src/lib/elements-router.module.ts","../../../projects/ngx-elements-router/src/ngx-elements-router.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nfunction load(url: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = url;\n    script.onload = () => resolve();\n    script.onerror = () =>\n      reject({\n        error: `Bundle ${url} could not be loaded`,\n      });\n    document.body.appendChild(script);\n  });\n}\n\n/**\n * The loading state of a bundle.\n *\n * UNKNOWN -> It has not been tried to load this bundle.\n * LOADING -> The loading of this bundle is currently happening.\n * LOADED -> The bundle has been successfully loaded.\n * FAILED -> The loading of the bundle failed.\n */\ntype LoadingState = 'UNKNOWN' | 'LOADING' | 'LOADED' | 'FAILED';\n\n/**\n * This service loads bundles and keeps track of which bundles have been already loaded.\n * This way, it prevents errors that would occur if a bundle is loaded a second time.\n */\n@Injectable({ providedIn: 'root' })\nexport class BundleRegistryService {\n  private loadingStates: Record<string, LoadingState> = {};\n\n  /**\n   * Loads the given bundle if not already loaded, registering its custom elements in the browser.\n   *\n   * @param bundleUrl The url of the bundle, can be absolute or relative to the domain + base href.\n   */\n  async loadBundle(bundleUrl: string): Promise<boolean> {\n    if (['LOADING', 'LOADED'].includes(this.getLoadingState(bundleUrl))) {\n      return true;\n    }\n    this.loadingStates[bundleUrl] = 'LOADING';\n    const isSuccess = await load(bundleUrl)\n      .then(() => true)\n      .catch(() => false);\n    this.loadingStates[bundleUrl] = isSuccess ? 'LOADED' : 'FAILED';\n    return isSuccess;\n  }\n\n  /**\n   * Returns the loading state of the bundle.\n   *\n   * @param bundleUrl The url of the bundle.\n   */\n  getLoadingState(bundleUrl: string): LoadingState {\n    return this.loadingStates[bundleUrl] || 'UNKNOWN';\n  }\n\n  /**\n   * Returns if the bundle has already been loaded successfully.\n   *\n   * @param bundleUrl The url of the bundle.\n   */\n  isBundleLoaded(bundleUrl: string): boolean {\n    return this.getLoadingState(bundleUrl) === 'LOADED';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, RoutesRecognized } from '@angular/router';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { RouterEvent } from './router-event.type';\n\nfunction isRedirect(event: RoutesRecognized): boolean {\n  return event.url !== event.urlAfterRedirects;\n}\n\n/**\n * Registers the routing feature on the entry component of a micro frontend.\n *\n * ```\n * export class ExampleComponent implements OnChanges, OnDestroy {\n *   @Input() route?: string;\n *   @Output() routeChange = new EventEmitter<string>();\n *   route$ = new Subject<string | undefined>;\n *   private destroyed$ = new Subject<void>();\n *   constructor(private entryRoutingService: EntryRoutingService) {\n *     this.entryRoutingService.registerRouting(this.routeChange, this.route$, this.destroyed$);\n *   }\n *   ngOnDestroy() {\n *     this.destroyed$.next();\n *   }\n *   ngOnChanges() {\n *     this.route$.next(this.route);\n *   }\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class EntryRoutingService {\n  constructor(private router: Router) {}\n\n  registerRouting(\n    outgoingRoute$: Subject<RouterEvent>,\n    incomingRoute$: Observable<string | undefined>\n  ): Subscription {\n    const inSubscription = this.registerIncomingRouting(incomingRoute$);\n    const outSubscription = this.registerOutgoingRouting(outgoingRoute$);\n    return inSubscription.add(outSubscription);\n  }\n\n  registerIncomingRouting(\n    incomingRoute$: Observable<string | undefined>\n  ): Subscription {\n    return incomingRoute$.pipe(distinctUntilChanged()).subscribe((route) => {\n      if (route) {\n        this.router.navigateByUrl(route, { state: { fromPlatform: true } });\n      }\n    });\n  }\n\n  registerOutgoingRouting(outgoingRoute$: Subject<RouterEvent>): Subscription {\n    return this.router.events.subscribe((event) => {\n      if (\n        event instanceof RoutesRecognized &&\n        (!this.isFromPlatform() || isRedirect(event))\n      ) {\n        outgoingRoute$.next({\n          url: event.urlAfterRedirects,\n          replaceUrl: isRedirect(event),\n        });\n      }\n    });\n  }\n\n  isFromPlatform(): boolean {\n    return this.router.getCurrentNavigation()?.extras.state?.fromPlatform;\n  }\n}\n","import { ApplicationRef, Injectable, NgZone } from '@angular/core';\nimport { EMPTY, Observable, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * Registers the zone feature on the entry component of a micro frontend.\n * It is intended to be used with the ZoneDirective on the custom element.\n * Together, they ensure that the change detection cycles of the Angular application of a micro frontend are executed.\n * This happens, whenever the `window.Zone` object indicates the necessity of a change detection cycle.\n *\n * ```\n * export class ExampleComponent implements OnChanges, OnDestroy {\n *   @Input() microtaskEmpty$?: Observable<void>;\n *   microtaskEmpty$$ = new Subject<Observable<void>>();\n *   constructor(private entryZoneService: EntryZoneService) {\n *     this.subscription = this.entryZoneService.registerZone(this.microtaskEmpty$$);\n *   }\n *   ngOnDestroy() {\n *     this.subscription.unsubscribe();\n *   }\n *   ngOnChanges() {\n *     this.microtaskEmpty$$.next(this.microtaskEmpty$);\n *   }\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class EntryZoneService {\n  constructor(private zone: NgZone, private applicationRef: ApplicationRef) {}\n\n  registerZone(\n    microtaskEmpty$$: Observable<Observable<void> | undefined>\n  ): Subscription {\n    return microtaskEmpty$$\n      .pipe(switchMap((microtaskEmpty$) => microtaskEmpty$ ?? EMPTY))\n      .subscribe(() => {\n        this.zone.run(() => {\n          this.applicationRef.tick();\n        });\n      });\n  }\n}\n","import {\n  APP_BASE_HREF,\n  LocationChangeListener,\n  LocationStrategy,\n  PlatformLocation,\n} from '@angular/common';\nimport { Inject, Injectable, Optional } from '@angular/core';\n\n/**\n * Acts as a noop location strategy that does not modify the browser url.\n * Should be used for a RouterModule in a micro frontend.\n * That way, the RouterModule of the platform is in charge of modifying the browser url.\n *\n * ```\n * imports: [\n *   RouterModule.forRoot([\n *     { path: 'my-route', component: SomeComponent },\n *     { path: '**', component: NoComponent }\n *   ])\n * ],\n * providers: [\n *   { provide: LocationStrategy, useClass: NoopLocationStrategy },\n * ]\n * ```\n */\n@Injectable()\nexport class NoopLocationStrategy extends LocationStrategy {\n  private readonly baseHref: string;\n\n  constructor(\n    private platformLocation: PlatformLocation,\n    @Optional() @Inject(APP_BASE_HREF) baseHref?: string\n  ) {\n    super();\n    this.baseHref = baseHref || this.platformLocation.getBaseHrefFromDOM();\n    if (!this.baseHref) {\n      throw new Error(\n        `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`\n      );\n    }\n  }\n\n  onPopState(_fn: LocationChangeListener): void {}\n\n  getBaseHref(): string {\n    return this.baseHref;\n  }\n\n  path(_includeHash: boolean = false): string {\n    return '';\n  }\n\n  prepareExternalUrl(internal: string): string {\n    if (this.baseHref.endsWith('/') && internal.startsWith('/')) {\n      return this.baseHref.substring(0, this.baseHref.length - 1) + internal;\n    } else if (this.baseHref.endsWith('/') || internal.startsWith('/')) {\n      return this.baseHref + internal;\n    } else {\n      return `${this.baseHref}/${internal}`;\n    }\n  }\n\n  pushState(\n    _state: any,\n    _title: string,\n    _path: string,\n    _queryParams: string\n  ): void {}\n\n  replaceState(\n    _state: any,\n    _title: string,\n    _path: string,\n    _queryParams: string\n  ): void {}\n\n  forward(): void {}\n\n  back(): void {}\n}\n","import { Component } from '@angular/core';\n\n/**\n * This component can be used for routes that shall never be resolved by the web component itself.\n * Instead, the host embedding the web component can resolve these routes.\n */\n@Component({\n  selector: 'aer-no-component',\n  template: '',\n})\nexport class NoComponent {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { BundleRegistryService } from './bundle-registry.service';\n\n/**\n * Ensures that a bundle is loaded before activating the route.\n *\n * ```\n * {\n *   path: 'my-micro-frontend',\n *   canActivate: [LoadBundleGuard],\n *   data: {\n *     bundleUrl: 'http://localhost:4200/main.js'\n *   },\n *   loadChildren: () => import('./my-micro-frontend/my-micro-frontend-host.module').then((m) => m.MyMicroFrontendHostModule)\n * }\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class LoadBundleGuard implements CanActivate {\n  constructor(private bundleRegistryService: BundleRegistryService) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Promise<boolean> {\n    const bundleUrl = route.data.bundleUrl as unknown;\n    if (!(typeof bundleUrl === 'string')) {\n      console.error(`\n        The LoadBundleGuard is missing information on which bundle to load.\n        Did you forget to provide a bundleUrl: string as data to the route?\n      `);\n      return Promise.resolve(false);\n    }\n    return this.bundleRegistryService.loadBundle(bundleUrl);\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { RouterEvent } from './router-event.type';\n\n/**\n * Enables the routing feature on a custom element.\n * It passes the activated route into the custom element and listens to route changes of the custom element.\n * The custom element needs to define an input `route` and an output `routeChange`.\n *\n * ```\n * @Component({\n *   selector: 'my-custom-element-host',\n *   template: `\n *     <my-custom-element aerRouting></lx-custom-element>\n *   `\n * })\n * export class MyCustomElementHostComponent {}\n * ```\n */\n@Directive({\n  selector: '[aerRouting]',\n})\nexport class RoutingDirective implements OnInit, OnDestroy {\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private element: ElementRef,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.url\n      .pipe(\n        map(() => this.router.url),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((url) => (this.element.nativeElement.route = url));\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n  }\n\n  @HostListener('routeChange', ['$event'])\n  handleRouteChange(event: { detail?: RouterEvent }): void {\n    this.navigateToUrl(event?.detail);\n  }\n\n  navigateToUrl(event: RouterEvent | undefined): void {\n    if (event?.url && event.url.startsWith('/')) {\n      this.router.navigateByUrl(event.url, {\n        replaceUrl: event.replaceUrl || false,\n      });\n    } else {\n      console.warn(\n        `The aerRouting directive received an invalid router event.`,\n        event\n      );\n    }\n  }\n}\n","import { Directive, ElementRef, NgZone, OnInit } from '@angular/core';\n\n/**\n * Enables the zone feature on a custom element.\n * It passes an observable of all events where the global `window.Zone` object reported that the microtask queue is empty.\n * Such an event indicates to Angular that a change detection cycle needs to be run.\n *\n * ```\n * @Component({\n *   selector: 'my-custom-element-host',\n *   template: `\n *     <my-custom-element aerZone></lx-custom-element>\n *   `\n * })\n * export class MyCustomElementHostComponent {}\n * ```\n */\n@Directive({\n  selector: '[aerZone]',\n})\nexport class ZoneDirective implements OnInit {\n  constructor(private element: ElementRef, private zone: NgZone) {}\n\n  ngOnInit(): void {\n    this.element.nativeElement.microtaskEmpty$ = this.zone.onMicrotaskEmpty;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NoComponent } from './no.component';\nimport { RoutingDirective } from './routing.directive';\nimport { ZoneDirective } from './zone.directive';\n\n@NgModule({\n  declarations: [ZoneDirective, RoutingDirective, NoComponent],\n  imports: [],\n  exports: [ZoneDirective, RoutingDirective, NoComponent],\n})\nexport class ElementsRouterModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}