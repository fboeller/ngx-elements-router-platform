{"version":3,"file":"entry-zone.service.d.ts","sources":["entry-zone.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ApplicationRef, NgZone } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n/**\n * Registers the zone feature on the entry component of a micro frontend.\n * It is intended to be used with the ZoneDirective on the custom element.\n * Together, they ensure that the change detection cycles of the Angular application of a micro frontend are executed.\n * This happens, whenever the `window.Zone` object indicates the necessity of a change detection cycle.\n *\n * ```\n * export class ExampleComponent implements OnChanges, OnDestroy {\n *   @Input() microtaskEmpty$?: Observable<void>;\n *   microtaskEmpty$$ = new Subject<Observable<void>>();\n *   constructor(private entryZoneService: EntryZoneService) {\n *     this.subscription = this.entryZoneService.registerZone(this.microtaskEmpty$$);\n *   }\n *   ngOnDestroy() {\n *     this.subscription.unsubscribe();\n *   }\n *   ngOnChanges() {\n *     this.microtaskEmpty$$.next(this.microtaskEmpty$);\n *   }\n * ```\n */\nexport declare class EntryZoneService {\n    private zone;\n    private applicationRef;\n    constructor(zone: NgZone, applicationRef: ApplicationRef);\n    registerZone(microtaskEmpty$$: Observable<Observable<void> | undefined>): Subscription;\n}\n"]}