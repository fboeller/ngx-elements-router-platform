{"version":3,"file":"bundle-registry.service.d.ts","sources":["bundle-registry.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA","sourcesContent":["/**\n * The loading state of a bundle.\n *\n * UNKNOWN -> It has not been tried to load this bundle.\n * LOADING -> The loading of this bundle is currently happening.\n * LOADED -> The bundle has been successfully loaded.\n * FAILED -> The loading of the bundle failed.\n */\ndeclare type LoadingState = 'UNKNOWN' | 'LOADING' | 'LOADED' | 'FAILED';\n/**\n * This service loads bundles and keeps track of which bundles have been already loaded.\n * This way, it prevents errors that would occur if a bundle is loaded a second time.\n */\nexport declare class BundleRegistryService {\n    private loadingStates;\n    /**\n     * Loads the given bundle if not already loaded, registering its custom elements in the browser.\n     *\n     * @param bundleUrl The url of the bundle, can be absolute or relative to the domain + base href.\n     */\n    loadBundle(bundleUrl: string): Promise<boolean>;\n    /**\n     * Returns the loading state of the bundle.\n     *\n     * @param bundleUrl The url of the bundle.\n     */\n    getLoadingState(bundleUrl: string): LoadingState;\n    /**\n     * Returns if the bundle has already been loaded successfully.\n     *\n     * @param bundleUrl The url of the bundle.\n     */\n    isBundleLoaded(bundleUrl: string): boolean;\n}\nexport {};\n"]}