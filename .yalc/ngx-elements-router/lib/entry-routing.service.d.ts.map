{"version":3,"file":"entry-routing.service.d.ts","sources":["entry-routing.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Router } from '@angular/router';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { RouterEvent } from './router-event.type';\n/**\n * Registers the routing feature on the entry component of a micro frontend.\n *\n * ```\n * export class ExampleComponent implements OnChanges, OnDestroy {\n *   @Input() route?: string;\n *   @Output() routeChange = new EventEmitter<string>();\n *   route$ = new Subject<string | undefined>;\n *   private destroyed$ = new Subject<void>();\n *   constructor(private entryRoutingService: EntryRoutingService) {\n *     this.entryRoutingService.registerRouting(this.routeChange, this.route$, this.destroyed$);\n *   }\n *   ngOnDestroy() {\n *     this.destroyed$.next();\n *   }\n *   ngOnChanges() {\n *     this.route$.next(this.route);\n *   }\n * ```\n */\nexport declare class EntryRoutingService {\n    private router;\n    constructor(router: Router);\n    registerRouting(outgoingRoute$: Subject<RouterEvent>, incomingRoute$: Observable<string | undefined>): Subscription;\n    registerIncomingRouting(incomingRoute$: Observable<string | undefined>): Subscription;\n    registerOutgoingRouting(outgoingRoute$: Subject<RouterEvent>): Subscription;\n    isFromPlatform(): boolean;\n}\n"]}